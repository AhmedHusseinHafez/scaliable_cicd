platform :ios do
  require 'securerandom'

  ##########################################
  # Global Variables
  ##########################################
  $is_ci = ENV['CI'] == "true"
  $keychain_name = SecureRandom.uuid
  $keychain_password = SecureRandom.hex(32)
  $dart_define_env_key = "DART_DEFINES"
  $current_flavor = "dev" # Default flavor

  $key_id = ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]
  $issuer_id = ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]
  $key_content = ENV["APP_STORE_CONNECT_API_KEY_KEY"]
  $team_id = ENV["TEAM_ID"]

  ##########################################
  # Helper Methods
  ##########################################

  private_lane :set_flavor do |options|
    flavor = options[:flavor] || "dev"
    UI.message "Setting flavor to #{flavor}"
    $current_flavor = flavor
    ENV[$dart_define_env_key] = "flavor=#{flavor}"
  end

  private_lane :setup_keychain do
    UI.message "Creating temporary keychain: #{$keychain_name}"
    create_keychain(
      name: $keychain_name,
      password: $keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )

    # Remove any old provisioning profiles or certificates that might conflict
    if $is_ci
      sh("rm -rf ~/Library/MobileDevice/Provisioning\\ Profiles/*")
    end
  end

  private_lane :remove_keychain do
    if $is_ci
      if File.exist?(File.expand_path("~/Library/Keychains/#{$keychain_name}-db"))
        UI.message "Deleting keychain #{$keychain_name}"
        delete_keychain(name: $keychain_name)
      end
    end
  end

  private_lane :login do
    UI.message "Loading Apple API Key"
    app_store_connect_api_key(
      key_id: $key_id,
      issuer_id: $issuer_id,
      key_content: $key_content,
    )
  end

  ##########################################
  # Match Lanes
  ##########################################

  private_lane :match_sync do |options|
    profile_type = options[:profile_type] || "appstore"

    login

    if $is_ci
      UI.message "Setting up keychain for CI"
      setup_keychain

      # App Store profiles
      match(
        type: "appstore",
        readonly: true,
        keychain_name: $keychain_name,
        keychain_password: $keychain_password
      )

      # Development profiles (required for archive to succeed)
      match(
        type: "development",
        readonly: true,
        keychain_name: $keychain_name,
        keychain_password: $keychain_password
      )
    else
      # Local development
      match(
        type: profile_type,
        readonly: false
      )
    end
  end

  ##########################################
  # Build Lane
  ##########################################

  desc "Build iOS App"
  lane :build do |options|
    flavor_config = options[:flavor] || "dev"
    set_flavor(flavor: flavor_config)

    match_sync(profile_type: "appstore")

    build_app(
      workspace: "Runner.xcworkspace",
      scheme: $current_flavor,
      export_method: "app-store",
      export_team_id: $team_id,
      xcargs: "-allowProvisioningUpdates DEVELOPMENT_TEAM=#{$team_id}",
      clean: true,
      output_directory: "./build/ios",
      output_name: "Runner"
    )
  end

  ##########################################
  # After All / Error Handling
  ##########################################

  after_all do |lane, options|
    remove_keychain
  end

  error do |lane, exception, options|
    remove_keychain
  end
end
